# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: PHP package

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: 
      - created
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get version values
        id: vars
        run: |
          echo ::set-output name=version::$(sed -nE 's/\$plugin->version = (.*?);$/\1/p' teslace_plugin/version.php)
          echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Show captured versions
        run: |
          echo 'Version in source code: ${{ steps.vars.outputs.version }}'
          echo 'Release version: ${{ steps.vars.outputs.tag }}'
      - name: Check version tag
        uses: nick-invision/assert-action@v1.1.0
        if: github.event_name == 'release'
        with:
          expected: ${{ steps.vars.outputs.tag }}
          actual: ${{ steps.vars.outputs.version }}
          comparison: exact
  build:
    needs: check
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-latest ] #, windows-latest, macos-latest ]
        php-versions: [ '7.3', '7.4' ]
    runs-on: ${{ matrix.operating-system }}
    services:
      # Label used to access the service container
      db:
        image: mariadb
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: .TeSLa-C3-password
          MYSQL_DATABASE: tesla
          MYSQL_USER: tesla
          MYSQL_PASSWORD: tesla-password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 3
          --name db
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, intl
          ini-values: post_max_size=256M, log_errors=1
          coverage: pcov 
          tools: phpunit       
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        continue-on-error: true
        run: |
          apt-get update && apt-get install -y curl zlib1g-dev zip libpng-dev libzip-dev libpq-dev libcurl4-gnutls-dev libxml2-dev libonig-dev git php-fpm php-zip php-pdo php-pdo-mysql php-gd php-json php-curl php-zip php-mbstring php-xml php-xmlrpc php-soap php-intl ssh-client
          mkdir -p /var/www/html
          mkdir -p /var/moodledata
          mkdir -p /var/moodletestdata

          rm -rf /var/www/html
          mkdir -p /var/www/html
          cd /var/www/html
          git clone -b 'v3.9.4' --single-branch git://git.moodle.org/moodle.git .

          cp teslace_plugin /var/www/html/local/teslace

          cd /var/www/html
          php /var/www/html/admin/cli/install.php --lang=en  --wwwroot="https://moodle.tesla-ce" --dataroot=/var/moodledata --dbtype=mariadb --dbhost="db" --dbname="tesla" --dbuser="tesla" --dbpass="tesla" --dbport="33069" --prefix="mdl_" --fullname="TeSLA Test" --shortname="TeslaTest" --summary="Tesla CE summary" --adminuser="moodle" --adminpass="moodle" --adminemail="test@tesla-ce.eu" --non-interactive --agree-license --allow-unstable
          # install Moodle composer
          composer install --no-progress --prefer-dist --optimize-autoloader

          # install moodle-plugin composer
          cd /var/www/html/local/teslace
          composer install --no-progress --prefer-dist --optimize-autoloader

          # PREPARE MOODLE FOR TESTS
          cd /var/www/html
          sed -i "/\\\*wwwroot\\\*/i \$CFG->phpunit_prefix = 'phpu_';\n" /var/www/html/config.php
          sed -i "/\\\*wwwroot\\\*/i \$CFG->phpunit_dataroot = '/var/moodletestdata';\n" /var/www/html/config.php

          php admin/tool/phpunit/cli/init.php
          vendor/bin/phpunit teslace_client_testcase local/teslace/tests/teslace_client_testcase.php

      # Add a step to run migrations if required
      - name: Test with phpunit
        continue-on-error: true
        run: vendor/bin/phpunit teslace_client_testcase local/teslace/tests/teslace_client_testcase.php --coverage-clover==/var/www/html/coverage.xml
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v1.5.0
        if: matrix.operating-system == 'ubuntu-latest'
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          PHP: ${{ matrix.php-version }}
          OS: ${{ matrix.operating-system }}
        with:
          fail_ci_if_error: true
          env_vars: OS,PHP
          files: /var/www/html/coverage.xml
      - name: Fossa update license analysis
        if: matrix.php-versions == '7.3'
        uses: fossa-contrib/fossa-action@v1
        continue-on-error: true
        with:
          fossa-api-key: ${{ secrets.FOSSA_API_KEY }}
  artifact:
    needs: check
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-latest ] #, windows-latest, macos-latest ]
        php-versions: [ '7.3' ]
    runs-on: ${{ matrix.operating-system }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get version values
        id: vars
        run: |
          echo ::set-output name=version::$(sed -nE 's/\$plugin->version = (.*?);$/\1/p' teslace_plugin/version.php)
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, intl
          ini-values: post_max_size=256M, log_errors=1
          coverage: pcov
          tools: phpunit
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Generate tar.gz file
        continue-on-error: true
        run: |
          cd teslace_plugin
          composer install
          cd ..
          mv teslace_plugin teslace
          tar czf tesla-ce-moodle-${{ steps.vars.outputs.version }}.tar.gz teslace
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tesla-ce-moodle-${{ steps.vars.outputs.version }}.tar.gz
          path: |
            tesla-ce-moodle-${{ steps.vars.outputs.version }}.tar.gz
  sonar:
    needs: build
    name: Sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: docker://sonarsource/sonar-scanner-cli:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  docker_tag:
    needs: sonar
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2.5.0
        with:
          push: true
          tags: teslace/moodle-plugin:${{ steps.vars.outputs.tag }}, teslace/moodle-plugin:latest
          file: docker/Dockerfile
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  docker_edge:
    needs: sonar
    runs-on: ubuntu-latest
    if: github.event_name != 'release' && github.event_name != 'pull_request'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2.5.0
        with:
          push: true
          tags: teslace/moodle-plugin:edge
          file: docker/Dockerfile
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
